import pytest

from solution import Solution


@pytest.mark.parametrize('s, locked, expected', [
    ("))()))", "010100", True),
    ("()()", "0000", True),
    (")", "0", False),

    ("())()))()(()(((())(()()))))((((()())(())", "1011101100010001001011000000110010100101", True),
    ("()))(()(()()()()(((())())((()((())", "1100000000000010000100001000001101", True),
    (
        "(()))()))(()((()()(((()))()()()()()())))()()(()())()(()((()()((()((((((()(()()(()()())(((((())((()))))()(((((((()()())()))())((((((()(())())()((())()()((())((((())(((())(())()()))(((()()())())))((()))))()()()((()))())(())(((()()((())(())(())())()((()))())(())()(()())((((()(((())((()()())(((()(((((()))()))))))(()((())())(())))))(())(((())()()(()))())())))(((())))()()))()())))))())()(()()))(())(()())))())()))((((())(()))()(((())())(()(()))()))((()(())()()))))())(()(((((()",
        "110001111001011100000100011110101000100110010010011001110010111111100111000100000000101111101001111111011101001110011001001100100001100000000010100010101101100000100001000110111000111110110010111011010010100011111101110011100010010001111001010001001000111101101111111011001000100111100110101000100011011001001100110011111111111100101000100111111100000100101101000101111101000011110001001011111010011010000100100000000011101011001110000110011000100001110101100101111111110100",
        False,
    ),
])
@pytest.mark.parametrize('sol', [Solution()])
def test_solution(sol, s, locked, expected):
    assert sol.canBeValid(s, locked) == expected
