import itertools
import pytest

from solution import Solution


@pytest.mark.parametrize('n, sums, expected', [
    (3, [-3,-2,-1,0,0,1,2,3], [1,2,-3]),
    (2, [0,0,0,0], [0,0]),
    (4, [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8], [0,-1,4,5]),

    (4, [0, -5, -2, 6, 10, -7, 1, 5, 4, 8, 16, -1, 3, 11, 14, 9], [-5, -2, 6, 10]),
    (
        7,
        [1588,2762,1459,308,969,1211,775,1987,1756,1733,957,1485,1277,1895,2260,2078,1041,1770,1551,1713,1277,867,1713,1859,2580,1721,1223,1770,467,1938,1072,810,1436,787,1369,539,1793,1998,1485,787,2041,721,490,1188,1095,1211,1539,1049,2169,582,1531,1266,1084,285,1574,1231,-182,824,2260,1357,1006,2157,2944,2295,1303,1266,2659,764,0,182,593,1667,1174,1326,721,1816,2762,1496,103,2454,1678,2223,320,1998,1223,684,605,1393,490,946,1508,672,775,1987,1006,764,2180,285,1448,1756,992,992,1975,1975,1254,1496,1508,1049,0,1405,2090,1314,502,1952,2477,2442,2272,1029,2041,2272,2477,1690,502,1805,1551,903,1254,1539],
        [-182, 182, 285, 490, 502, 721, 764]
    ),
    (
        9,
        [190,877,-182,-910,318,-653,-1742,921,-605,-989,-2229,-90,-408,149,-1294,0,692,663,-948,-297,-1101,475,494,622,-795,-288,-490,457,-1005,-515,144,565,202,1429,136,-716,-919,902,308,-531,-150,-659,-592,145,20,82,145,785,298,-1422,-1400,-486,-376,-989,-1218,-455,-147,-338,183,-181,661,-445,-640,-284,-103,968,1121,107,1455,-487,273,2513,1397,952,129,-366,-809,184,939,340,-489,152,-821,648,171,-1492,-163,647,428,-637,-807,581,-160,1118,1414,615,-144,-901,2221,635,498,597,507,-964,1376,-474,292,-1021,-185,-1409,-1297,-179,1468,1398,-650,924,-993,157,1747,599,-2047,-306,1776,-787,-135,-684,-685,-931,384,-618,-147,-335,-1284,585,-935,603,-1281,997,1137,657,-534,-207,647,-976,-198,-2092,142,-131,-963,-614,-1418,-194,-627,136,158,-1450,-423,22,-944,-178,-182,-239,-166,1760,-623,432,-106,-675,-316,-24,523,1684,895,-639,1286,-621,1715,-655,-160,1900,-1908,-176,-945,1410,-153,-1142,66,-1129,282,1260,936,628,1071,1706,-44,1913,311,-697,952,-1434,619,603,-656,-624,-646,1394,-684,491,1102,8,-1771,931,-1329,-1800,-322,218,-700,1458,1385,943,510,326,1261,1150,1702,476,-1739,590,-192,-119,-226,-589,953,264,-210,-1310,-971,1442,123,965,352,594,-10,-32,940,984,450,355,113,95,-173,-1002,-932,148,-942,-634,1592,330,-977,556,-643,-168,-1171,114,911,189,-102,631,-547,949,-481,202,-1145,-1602,-313,-169,-46,920,1884,626,120,154,644,673,783,616,-363,1439,-668,1216,829,-367,-671,-1079,1013,1228,1270,1077,908,139,-169,815,431,1718,215,-2216,-1095,1750,1410,-1434,441,1147,-1774,-926,161,-411,-611,295,-1482,-593,-1453,-992,463,-979,763,-658,-300,123,-605,-1421,248,-1416,676,600,-1113,-379,632,634,581,-1008,-1161,206,-960,110,-137,1423,2068,34,-729,2192,-124,-1126,387,1731,-1755,-853,-58,955,-172,276,797,-226,-1108,170,-477,-1466,-967,978,918,1273,2023,-465,-1479,-242,479,-1438,277,140,-1924,-1174,1392,-913,2205,749,629,-1616,155,-627,-503,421,-499,-580,-115,-1117,-518,173,91,79,-1037,-955,1257,339,-214,78,289,-1263,965,260,886,-652,100,126,1084,1578,-319,-1387,342,-973,-2537,568,-1784,-452,907,771,174,186,1194,462,-773,-148,-663,-1130,-156,1363,-272,-1708,-1730,177,969,-1447,-468,-976,1055,-839,466,-201,-14,660,705,587,399,-197,-230,613,1106,-609,453,-208,-456,873,1089,-1463,158,-331,-354,-897,321,-1937,-1252,1305,-1726,124,610,947,-500,-301,-364,-681,981,314,168,660,1426,1239,343,-213,889,651,-1240,1105,-522,569,639,444,132,-138,-671,1093,465,-1285,-342,-134,307,-672,-195,-350,-687,111,-332,-2245,-164,-345],
        [-807, -795, -490, -445, 292, 308, 321, 763, 829]
    ),
])
class Test:
    def test_solution(self, n, sums, expected):
        sol = Solution()
        result = sol.recoverArray(n, sums.copy())
        assert sorted(result) == sorted(expected) or self._sum_all(result) == sorted(sums)

    def _sum_all(self, arr: list[int]) -> list[int]:
        sums = []
        for r in range(len(arr) + 1):
            for vals in itertools.combinations(arr, r):
                sums.append(sum(vals))

        return sorted(sums)
