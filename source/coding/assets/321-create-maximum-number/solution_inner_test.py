import pytest

from solution import merge, pick_max_sub


@pytest.mark.parametrize('nums, expected', [
    (
        [3,4,6,5],
        [
            [6],
            [6, 5],
            [4, 6, 5],
            [3, 4, 6, 5],
        ]
    ),
    (
        [9,1,2,5,8,3],
        [
            [9],
            [9, 8],
            [9, 8, 3],
            [9, 5, 8, 3],
            [9, 2, 5, 8, 3],
            [9, 1, 2, 5, 8, 3],
        ]
    ),
    (
        [6,0,4],
        [
            [6],
            [6, 4],
            [6, 0, 4],
        ]
    ),
    (
        [4,0,9,9,0,5,5,4,7],
        [
            [9],
            [9, 9],
            [9, 9, 7],
            [9, 9, 5, 7],
            [9, 9, 5, 5, 7],
            [9, 9, 5, 5, 4, 7],
            [9, 9, 0, 5, 5, 4, 7],
            [4, 9, 9, 0, 5, 5, 4, 7],
            [4, 0, 9, 9, 0, 5, 5, 4, 7],
        ]
    ),
    (
        [2,5,6,4,4,0],
        [
            [6],
            [6, 4],
            [6, 4, 4],
            [6, 4, 4, 0],
            [5, 6, 4, 4, 0],
            [2, 5, 6, 4, 4, 0],
        ]
    ),
    (
        [7,3,8,0,6,5,7,6,2],
        [
            [8],
            [8, 7],
            [8, 7, 6],
            [8, 7, 6, 2],
            [8, 6, 7, 6, 2],
            [8, 6, 5, 7, 6, 2],
            [8, 0, 6, 5, 7, 6, 2],
            [7, 8, 0, 6, 5, 7, 6, 2],
            [7, 3, 8, 0, 6, 5, 7, 6, 2],
        ]
    ),
])
def test_pick_max_sub(nums, expected):
    result = [pick_max_sub(nums, k) for k in range(1, len(nums) + 1)]
    assert result == expected


@pytest.mark.parametrize('nums1, nums2, expected', [
    ([6, 5], [9, 8, 3], [9, 8, 6, 5, 3]),
    ([6, 7], [6, 0, 4], [6, 7, 6, 0, 4]),
    ([9], [8, 9], [9, 8, 9]),
    ([4, 6, 5], [9, 5, 8, 3], [9, 5, 8, 4, 6, 5, 3]),
    ([6, 5], [], [6, 5]),
    ([], [9, 8, 3], [9, 8, 3]),
    ([2, 5, 6, 4, 4, 0], [7, 3, 8, 0, 6, 5, 7, 6, 2], [7, 3, 8, 2, 5, 6, 4, 4, 0, 6, 5, 7, 6, 2, 0]),
])
def test_merge(nums1, nums2, expected):
    assert merge(nums1, nums2) == expected
